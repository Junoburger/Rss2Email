name: Build & Tests

on:
  push:
  pull_request:

env:
  CARGO_TERM_COLOR: always

jobs:
  build_test:
    name: Build & Test (${{ matrix.channel }})
    runs-on: ubuntu-latest
    continue-on-error: ${{ matrix.channel == 'nightly' }}

    strategy:
      matrix:
        channel: [ "stable", "nightly" ]

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Setup ${{ matrix.channel }} Rust
      uses: ATiltedTree/setup-rust@v1
      with:
        rust-version: ${{ matrix.channel }}
    
    - name: Use cached dependencies
      uses: Swatinem/rust-cache@v2
      with:
        shared-key: "shared"

    - name: Build (${{ matrix.channel }})
      run: cargo +${{ matrix.channel }} build --verbose

    - name: Run tests (${{ matrix.channel }})
      run: cargo +${{ matrix.channel }} test --verbose

  # This is more of a sanity check, these 2 should always
  # succeed so long as the first 2 succeed
  docker_build:
    name: Docker build (${{ matrix.name }})
    runs-on: ubuntu-latest

    strategy:
      matrix:
        name: [ 'base' ]
        args: [ '-t rss2email-base' ]
        include:
          - name: 'AWS Lambda'
            args: '-t rss2email-aws --build-arg compile_flag="--features aws-lambda"'

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Create required files
        run: |
          cp .env.example .env
          touch feeds.txt

      - name: Docker build (${{ matrix.name }})
        run: docker build ${{ matrix.args }} .

  lint:
    name: Lint
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install clippy
        run: rustup component add clippy

      - name: Use cached dependencies
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: "shared"

      - name: Run clippy
        run: cargo clippy -- -Dwarnings
